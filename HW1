{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1b421ac0-d817-4589-9c45-d92541bf4f08",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "row_n           0\n",
      "id              1\n",
      "name            0\n",
      "gender          0\n",
      "species         0\n",
      "birthday        0\n",
      "personality     0\n",
      "song           11\n",
      "phrase          0\n",
      "full_id         0\n",
      "url             0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "url = \"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-05/villagers.csv\"\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Check for missing values\n",
    "na_counts = df.isna().sum()\n",
    "print(na_counts)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f857424-6156-421c-bffc-856f408bed04",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dataset has 800 rows and 12 columns.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "url = \"https://raw.githubusercontent.com/KeithGalli/pandas/master/pokemon_data.csv\"\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Determine the number of rows and columns\n",
    "rows, columns = df.shape\n",
    "\n",
    "# Print the results\n",
    "print(f\"The dataset has {rows} rows and {columns} columns.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86a7c6e1-8585-421f-992b-a78bcbe25e21",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Within the dataset, an observation denotes a single record or data point. A data table's rows are each observations.An trait or characteristic that changes in value depending on the observations is called a variable. In a data table, a variable is represented by each column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "44ba0efd-612b-4cae-afc9-6c3353dd5879",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Information:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 800 entries, 0 to 799\n",
      "Data columns (total 12 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   #           800 non-null    int64 \n",
      " 1   Name        800 non-null    object\n",
      " 2   Type 1      800 non-null    object\n",
      " 3   Type 2      414 non-null    object\n",
      " 4   HP          800 non-null    int64 \n",
      " 5   Attack      800 non-null    int64 \n",
      " 6   Defense     800 non-null    int64 \n",
      " 7   Sp. Atk     800 non-null    int64 \n",
      " 8   Sp. Def     800 non-null    int64 \n",
      " 9   Speed       800 non-null    int64 \n",
      " 10  Generation  800 non-null    int64 \n",
      " 11  Legendary   800 non-null    bool  \n",
      "dtypes: bool(1), int64(8), object(3)\n",
      "memory usage: 69.7+ KB\n",
      "\n",
      "Summary Statistics:\n",
      "                #          HP      Attack     Defense     Sp. Atk     Sp. Def  \\\n",
      "count  800.000000  800.000000  800.000000  800.000000  800.000000  800.000000   \n",
      "mean   362.813750   69.258750   79.001250   73.842500   72.820000   71.902500   \n",
      "std    208.343798   25.534669   32.457366   31.183501   32.722294   27.828916   \n",
      "min      1.000000    1.000000    5.000000    5.000000   10.000000   20.000000   \n",
      "25%    184.750000   50.000000   55.000000   50.000000   49.750000   50.000000   \n",
      "50%    364.500000   65.000000   75.000000   70.000000   65.000000   70.000000   \n",
      "75%    539.250000   80.000000  100.000000   90.000000   95.000000   90.000000   \n",
      "max    721.000000  255.000000  190.000000  230.000000  194.000000  230.000000   \n",
      "\n",
      "            Speed  Generation  \n",
      "count  800.000000   800.00000  \n",
      "mean    68.277500     3.32375  \n",
      "std     29.060474     1.66129  \n",
      "min      5.000000     1.00000  \n",
      "25%     45.000000     2.00000  \n",
      "50%     65.000000     3.00000  \n",
      "75%     90.000000     5.00000  \n",
      "max    180.000000     6.00000  \n",
      "\n",
      "First 5 Rows:\n",
      "   #                   Name Type 1  Type 2  HP  Attack  Defense  Sp. Atk  \\\n",
      "0  1              Bulbasaur  Grass  Poison  45      49       49       65   \n",
      "1  2                Ivysaur  Grass  Poison  60      62       63       80   \n",
      "2  3               Venusaur  Grass  Poison  80      82       83      100   \n",
      "3  3  VenusaurMega Venusaur  Grass  Poison  80     100      123      122   \n",
      "4  4             Charmander   Fire     NaN  39      52       43       60   \n",
      "\n",
      "   Sp. Def  Speed  Generation  Legendary  \n",
      "0       65     45           1      False  \n",
      "1       80     60           1      False  \n",
      "2      100     80           1      False  \n",
      "3      120     80           1      False  \n",
      "4       50     65           1      False  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "url = \"https://raw.githubusercontent.com/KeithGalli/pandas/master/pokemon_data.csv\"\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Display basic information about the dataset (data types, null values, etc.)\n",
    "print(\"Dataset Information:\")\n",
    "df.info()\n",
    "\n",
    "# Display summary statistics for numerical columns\n",
    "print(\"\\nSummary Statistics:\")\n",
    "print(df.describe())\n",
    "\n",
    "# Display the first 5 rows of the dataset\n",
    "print(\"\\nFirst 5 Rows:\")\n",
    "print(df.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a59cd038-2840-4cad-92f4-84b412d71cce",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Size (df.shape):\n",
      "(800, 12)\n",
      "\n",
      "Summary Statistics (df.describe()):\n",
      "                #          HP      Attack     Defense     Sp. Atk     Sp. Def  \\\n",
      "count  800.000000  800.000000  800.000000  800.000000  800.000000  800.000000   \n",
      "mean   362.813750   69.258750   79.001250   73.842500   72.820000   71.902500   \n",
      "std    208.343798   25.534669   32.457366   31.183501   32.722294   27.828916   \n",
      "min      1.000000    1.000000    5.000000    5.000000   10.000000   20.000000   \n",
      "25%    184.750000   50.000000   55.000000   50.000000   49.750000   50.000000   \n",
      "50%    364.500000   65.000000   75.000000   70.000000   65.000000   70.000000   \n",
      "75%    539.250000   80.000000  100.000000   90.000000   95.000000   90.000000   \n",
      "max    721.000000  255.000000  190.000000  230.000000  194.000000  230.000000   \n",
      "\n",
      "            Speed  Generation  \n",
      "count  800.000000   800.00000  \n",
      "mean    68.277500     3.32375  \n",
      "std     29.060474     1.66129  \n",
      "min      5.000000     1.00000  \n",
      "25%     45.000000     2.00000  \n",
      "50%     65.000000     3.00000  \n",
      "75%     90.000000     5.00000  \n",
      "max    180.000000     6.00000  \n",
      "\n",
      "Summary of All Columns (df.describe(include='all')):\n",
      "                 #       Name Type 1  Type 2          HP      Attack  \\\n",
      "count   800.000000        800    800     414  800.000000  800.000000   \n",
      "unique         NaN        800     18      18         NaN         NaN   \n",
      "top            NaN  Bulbasaur  Water  Flying         NaN         NaN   \n",
      "freq           NaN          1    112      97         NaN         NaN   \n",
      "mean    362.813750        NaN    NaN     NaN   69.258750   79.001250   \n",
      "std     208.343798        NaN    NaN     NaN   25.534669   32.457366   \n",
      "min       1.000000        NaN    NaN     NaN    1.000000    5.000000   \n",
      "25%     184.750000        NaN    NaN     NaN   50.000000   55.000000   \n",
      "50%     364.500000        NaN    NaN     NaN   65.000000   75.000000   \n",
      "75%     539.250000        NaN    NaN     NaN   80.000000  100.000000   \n",
      "max     721.000000        NaN    NaN     NaN  255.000000  190.000000   \n",
      "\n",
      "           Defense     Sp. Atk     Sp. Def       Speed  Generation Legendary  \n",
      "count   800.000000  800.000000  800.000000  800.000000   800.00000       800  \n",
      "unique         NaN         NaN         NaN         NaN         NaN         2  \n",
      "top            NaN         NaN         NaN         NaN         NaN     False  \n",
      "freq           NaN         NaN         NaN         NaN         NaN       735  \n",
      "mean     73.842500   72.820000   71.902500   68.277500     3.32375       NaN  \n",
      "std      31.183501   32.722294   27.828916   29.060474     1.66129       NaN  \n",
      "min       5.000000   10.000000   20.000000    5.000000     1.00000       NaN  \n",
      "25%      50.000000   49.750000   50.000000   45.000000     2.00000       NaN  \n",
      "50%      70.000000   65.000000   70.000000   65.000000     3.00000       NaN  \n",
      "75%      90.000000   95.000000   90.000000   90.000000     5.00000       NaN  \n",
      "max     230.000000  194.000000  230.000000  180.000000     6.00000       NaN  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "url = \"https://raw.githubusercontent.com/KeithGalli/pandas/master/pokemon_data.csv\"\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Show the size of the dataset (total rows and columns)\n",
    "print(\"Dataset Size (df.shape):\")\n",
    "print(df.shape)\n",
    "\n",
    "# Show summary statistics for numeric columns\n",
    "print(\"\\nSummary Statistics (df.describe()):\")\n",
    "print(df.describe())\n",
    "\n",
    "# Include non-numeric columns in the description\n",
    "print(\"\\nSummary of All Columns (df.describe(include='all')):\")\n",
    "print(df.describe(include='all'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ec25593-afdd-4738-87bd-259057104a6c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Attributes: These are characteristics or values connected to an item. Parentheses are not needed in order to access them. For instance, if you're using pandas, df.shape in a DataFrame delivers the DataFrame's dimensions as a tuple. Because it only obtains data without taking any further action, it qualifies as an attribute.\n",
    "\n",
    "Methods are functions that carry out activities and are connected to an object. Parentheses must be called on them. For instance, the DataFrame's statistical summary information is returned by df.describe(). Because it computes something and outputs the result, it is a method.\n",
    "\n",
    "In conclusion, methods must be called in parenthesis in order to be executed, whereas attributes can be accessed directly.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd0e3f90-c1b6-4a36-9587-c289d463a4cc",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "Count: The number of non-null entries for each variable. It shows how many values are present for each column.\n",
    "\n",
    "Mean: The average value of the variable. It is calculated by summing all the values and dividing by the count of the values.\n",
    "\n",
    "Std (Standard Deviation): A measure of the amount of variation or dispersion in the values. It indicates how much the values deviate from the mean. A high standard deviation means values are spread out over a wider range.\n",
    "\n",
    "Min: The minimum value in the variable. It represents the smallest value observed.\n",
    "\n",
    "25% (25th Percentile or First Quartile): The value below which 25% of the observations fall. It is the first quartile, which separates the lowest 25% of the data from the rest.\n",
    "\n",
    "50% (50th Percentile or Median): The middle value of the variable when the data is sorted. Half of the values fall below this point, and half fall above it. It is also known as the median.\n",
    "\n",
    "75% (75th Percentile or Third Quartile): The value below which 75% of the observations fall. It is the third quartile, which separates the lowest 75% of the data from the highest 25%.\n",
    "\n",
    "Max: The maximum value in the variable. It represents the largest value observed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ee7a8759-7793-4bbb-8186-3944e179c359",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Sample DataFrame\n",
    "data = {\n",
    "    'A': [1, 2, np.nan, 4],\n",
    "    'B': [5, np.nan, 7, 8],\n",
    "    'C': [9, 10, 11, np.nan]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "04e904ce-d5e8-4570-8253-e91f83103db9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Sample DataFrame\n",
    "data = {\n",
    "    'A': [1, 2, np.nan, 4],\n",
    "    'B': [5, np.nan, 7, 8],\n",
    "    'C': [9, 10, 11, np.nan]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14b0e983-562b-4258-91dc-ae3cf40b3d1b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "1. Efficiency\n",
    "Memory and Performance: If a column contains a large number of missing values or if the column itself is very large, it can consume significant memory and processing power when performing operations like df.dropna(). Removing such columns first with del df['col'] can reduce the size of the DataFrame, making the dropna() operation more efficient and faster.\n",
    "2. Relevance of Data\n",
    "Irrelevant Columns: If a column is deemed irrelevant or unnecessary for the analysis, removing it before applying df.dropna() ensures that you are not spending resources on cleaning data that you don't need. For instance, if a column is completely irrelevant to your analysis, it’s better to remove it beforehand.\n",
    "3. Impact on Results\n",
    "Avoiding Unintended Consequences: If you run df.dropna() without removing certain columns, you might end up dropping rows that could be important for your analysis because those columns are causing rows to be removed. By deleting irrelevant columns first, you ensure that the dropna() operation is performed on a more focused set of columns, thus avoiding unintended data loss.\n",
    "4. Data Integrity\n",
    "Preserving Important Data: By removing columns that are not useful or are mostly filled with missing values before running dropna(), you prevent the potential issue of dropping rows that might still have valuable information in the remaining columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "810fc325-20b7-4ff0-bfa0-0f7d5138bfd8",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Sample DataFrame\n",
    "data = {\n",
    "    'A': [1, 2, np.nan, 4],\n",
    "    'B': [5, np.nan, 7, 8],\n",
    "    'C': [np.nan, np.nan, np.nan, 4],\n",
    "    'D': [10, 20, np.nan, 40]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04a6e2f9-6043-47ae-8de9-c0cce92f2691",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "     A    B    C     D\n",
    "0  1.0  5.0  NaN  10.0\n",
    "1  2.0  NaN  NaN  20.0\n",
    "2  NaN  7.0  NaN   NaN\n",
    "3  4.0  8.0  4.0  40.0\n",
    "     A    B     D\n",
    "0  1.0  5.0  10.0\n",
    "3  4.0  8.0  40.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ef58cbce-7d94-4b8d-ae3a-6cc74523c279",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Siblings/Spouses Aboard</th>\n",
       "      <th>Parents/Children Aboard</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. Owen Harris Braund</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs. John Bradley (Florence Briggs Thayer) Cum...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss. Laina Heikkinen</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs. Jacques Heath (Lily May Peel) Futrelle</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr. William Henry Allen</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass                                               Name  \\\n",
       "0         0       3                             Mr. Owen Harris Braund   \n",
       "1         1       1  Mrs. John Bradley (Florence Briggs Thayer) Cum...   \n",
       "2         1       3                              Miss. Laina Heikkinen   \n",
       "3         1       1        Mrs. Jacques Heath (Lily May Peel) Futrelle   \n",
       "4         0       3                            Mr. William Henry Allen   \n",
       "\n",
       "      Sex   Age  Siblings/Spouses Aboard  Parents/Children Aboard     Fare  \n",
       "0    male  22.0                        1                        0   7.2500  \n",
       "1  female  38.0                        1                        0  71.2833  \n",
       "2  female  26.0                        0                        0   7.9250  \n",
       "3  female  35.0                        1                        0  53.1000  \n",
       "4    male  35.0                        0                        0   8.0500  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load Titanic dataset (example dataset URL)\n",
    "url = 'https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv'\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Display the first few rows of the DataFrame\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2a57a8f0-3386-4393-900a-2c9ad0999803",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              A         B    C          D\n",
      "count  3.000000  3.000000  1.0   3.000000\n",
      "mean   2.333333  6.666667  4.0  23.333333\n",
      "std    1.527525  1.527525  NaN  15.275252\n",
      "min    1.000000  5.000000  4.0  10.000000\n",
      "25%    1.500000  6.000000  4.0  15.000000\n",
      "50%    2.000000  7.000000  4.0  20.000000\n",
      "75%    3.000000  7.500000  4.0  30.000000\n",
      "max    4.000000  8.000000  4.0  40.000000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Sample DataFrame with missing values\n",
    "data = {\n",
    "    'A': [1, 2, np.nan, 4],\n",
    "    'B': [5, np.nan, 7, 8],\n",
    "    'C': [np.nan, np.nan, np.nan, 4],\n",
    "    'D': [10, 20, np.nan, 40]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(df.describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0ac07ff6-9969-49ba-b1db-3c2496c974e7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        count  mean  std   min   25%   50%   75%   max\n",
      "Pclass                                                \n",
      "1         1.0  22.0  NaN  22.0  22.0  22.0  22.0  22.0\n",
      "2         1.0  26.0  NaN  26.0  26.0  26.0  26.0  26.0\n",
      "3         0.0   NaN  NaN   NaN   NaN   NaN   NaN   NaN\n"
     ]
    }
   ],
   "source": [
    "# Sample DataFrame with an additional categorical column\n",
    "data = {\n",
    "    'Pclass': [1, 2, 2, 3],\n",
    "    'Age': [22, np.nan, 26, np.nan]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(df.groupby(\"Pclass\")[\"Age\"].describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3307fda1-f67b-4e77-90f9-ca960c28dfed",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "yes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
